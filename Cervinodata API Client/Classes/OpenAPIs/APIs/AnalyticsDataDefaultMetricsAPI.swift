//
// AnalyticsDataDefaultMetricsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class AnalyticsDataDefaultMetricsAPI {
    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsReportPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsReportPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics report per campaign per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportPerCampaignPerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerCampaignPerDay? = nil, format: Format_getAnalyticsReportPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAnalyticsReportPerCampaignPerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics report per campaign per day by organisation
     - GET /data/analytics-report-per-campaign-per-day/{organisationUuid}
     - Analytics report per campaign per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsReportPerCampaignPerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerCampaignPerDay? = nil, format: Format_getAnalyticsReportPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/analytics-report-per-campaign-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsReportPerChannelGroupPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsReportPerChannelGroupPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics report per channel group per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportPerChannelGroupPerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerChannelGroupPerDay? = nil, format: Format_getAnalyticsReportPerChannelGroupPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAnalyticsReportPerChannelGroupPerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics report per channel group per day by organisation
     - GET /data/analytics-report-per-channel-group-per-day/{organisationUuid}
     - Analytics report per channel group per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsReportPerChannelGroupPerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerChannelGroupPerDay? = nil, format: Format_getAnalyticsReportPerChannelGroupPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/analytics-report-per-channel-group-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics report per device per channel group per organisation per view per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay? = nil, format: Format_getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics report per device per channel group per organisation per view per day
     - GET /data/analytics-report-per-device-per-channel-group-per-organisation-per-view-per-day/{organisationUuids}
     - Analytics report per device per channel group per organisation per view per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay? = nil, format: Format_getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/analytics-report-per-device-per-channel-group-per-organisation-per-view-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsReportPerDevicePerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsReportPerDevicePerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics report per device per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportPerDevicePerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerDevicePerDay? = nil, format: Format_getAnalyticsReportPerDevicePerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAnalyticsReportPerDevicePerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics report per device per day by organisation
     - GET /data/analytics-report-per-device-per-day/{organisationUuid}
     - Analytics report per device per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsReportPerDevicePerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerDevicePerDay? = nil, format: Format_getAnalyticsReportPerDevicePerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/analytics-report-per-device-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsReportPerSourceMediumPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsReportPerSourceMediumPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics report per source medium per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportPerSourceMediumPerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerSourceMediumPerDay? = nil, format: Format_getAnalyticsReportPerSourceMediumPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAnalyticsReportPerSourceMediumPerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics report per source medium per day by organisation
     - GET /data/analytics-report-per-source-medium-per-day/{organisationUuid}
     - Analytics report per source medium per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsReportPerSourceMediumPerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsReportPerSourceMediumPerDay? = nil, format: Format_getAnalyticsReportPerSourceMediumPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/analytics-report-per-source-medium-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
