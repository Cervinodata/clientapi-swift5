//
// AnalyticsDataGoalsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AnalyticsDataGoalsAPI {

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsGoalReportPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsGoalReportPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics goal report per campaign per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsGoalReportPerCampaignPerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsGoalReportPerCampaignPerDay? = nil, format: Format_getAnalyticsGoalReportPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) {
        getAnalyticsGoalReportPerCampaignPerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics goal report per campaign per day by organisation
     - GET /data/analytics-goal-report-per-campaign-per-day/{organisationUuid}
     - Analytics goal report per campaign per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsGoalReportPerCampaignPerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsGoalReportPerCampaignPerDay? = nil, format: Format_getAnalyticsGoalReportPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/analytics-goal-report-per-campaign-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(),
            "date_format": dateFormat?.encodeToJSON(),
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsGoalReportPerChannelGroupPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsGoalReportPerChannelGroupPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics goal report per channel group per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsGoalReportPerChannelGroupPerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsGoalReportPerChannelGroupPerDay? = nil, format: Format_getAnalyticsGoalReportPerChannelGroupPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) {
        getAnalyticsGoalReportPerChannelGroupPerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics goal report per channel group per day by organisation
     - GET /data/analytics-goal-report-per-channel-group-per-day/{organisationUuid}
     - Analytics goal report per channel group per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsGoalReportPerChannelGroupPerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsGoalReportPerChannelGroupPerDay? = nil, format: Format_getAnalyticsGoalReportPerChannelGroupPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/analytics-goal-report-per-channel-group-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(),
            "date_format": dateFormat?.encodeToJSON(),
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsGoalReportPerDevicePerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsGoalReportPerDevicePerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics goal report per device per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsGoalReportPerDevicePerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsGoalReportPerDevicePerDay? = nil, format: Format_getAnalyticsGoalReportPerDevicePerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) {
        getAnalyticsGoalReportPerDevicePerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics goal report per device per day by organisation
     - GET /data/analytics-goal-report-per-device-per-day/{organisationUuid}
     - Analytics goal report per device per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsGoalReportPerDevicePerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsGoalReportPerDevicePerDay? = nil, format: Format_getAnalyticsGoalReportPerDevicePerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/analytics-goal-report-per-device-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(),
            "date_format": dateFormat?.encodeToJSON(),
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAnalyticsGoalReportPerSourceMediumPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAnalyticsGoalReportPerSourceMediumPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return analytics goal report per source medium per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsGoalReportPerSourceMediumPerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsGoalReportPerSourceMediumPerDay? = nil, format: Format_getAnalyticsGoalReportPerSourceMediumPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) {
        getAnalyticsGoalReportPerSourceMediumPerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return analytics goal report per source medium per day by organisation
     - GET /data/analytics-goal-report-per-source-medium-per-day/{organisationUuid}
     - Analytics goal report per source medium per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAnalyticsGoalReportPerSourceMediumPerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAnalyticsGoalReportPerSourceMediumPerDay? = nil, format: Format_getAnalyticsGoalReportPerSourceMediumPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/analytics-goal-report-per-source-medium-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(),
            "date_format": dateFormat?.encodeToJSON(),
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
