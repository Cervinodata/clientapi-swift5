//
// CampaignGroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CampaignGroupAPI {

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupAdReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupAdReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group ad report per organisation per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupAdReportPerOrganisationPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupAdReportPerOrganisationPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupAdReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group ad report per organisation per campaign per day
     - GET /data/campaign-group-ad-report-per-organisation-per-campaign-per-day/{organisationUuids}
     - Campaign group ad report per organisation per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupAdReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupAdReportPerOrganisationPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-ad-report-per-organisation-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group ad report per organisation per campaign per week
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek? = nil, format: Format_getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group ad report per organisation per campaign per week
     - GET /data/campaign-group-ad-report-per-organisation-per-campaign-per-week/{organisationUuids}
     - Campaign group ad report per organisation per campaign per week
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek? = nil, format: Format_getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-ad-report-per-organisation-per-campaign-per-week/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupAdReportPerOrganisationPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupAdReportPerOrganisationPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group ad report per organisation per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupAdReportPerOrganisationPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupAdReportPerOrganisationPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupAdReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group ad report per organisation per day
     - GET /data/campaign-group-ad-report-per-organisation-per-day/{organisationUuids}
     - Campaign group ad report per organisation per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupAdReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupAdReportPerOrganisationPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-ad-report-per-organisation-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group adform extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group adform extended report per organisation per account per campaign per day
     - GET /data/campaign-group-adform-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group adform extended report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupAdformExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-adform-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group adform report per organisation per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group adform report per organisation per campaign per day
     - GET /data/campaign-group-adform-report-per-organisation-per-campaign-per-day/{organisationUuids}
     - Campaign group adform report per organisation per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-adform-report-per-organisation-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group adform report per organisation per campaign per line-item per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay? = nil, format: Format_getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group adform report per organisation per campaign per line-item per day
     - GET /data/campaign-group-adform-report-per-organisation-per-campaign-per-line-item-per-day/{organisationUuids}
     - Campaign group adform report per organisation per campaign per line-item per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay? = nil, format: Format_getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-adform-report-per-organisation-per-campaign-per-line-item-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupAnalyticsReportPerOrganisationPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupAnalyticsReportPerOrganisationPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group analytics report per organisation per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupAnalyticsReportPerOrganisationPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAnalyticsReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupAnalyticsReportPerOrganisationPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupAnalyticsReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group analytics report per organisation per day
     - GET /data/campaign-group-analytics-report-per-organisation-per-day/{organisationUuids}
     - Campaign group analytics report per organisation per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupAnalyticsReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupAnalyticsReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupAnalyticsReportPerOrganisationPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-analytics-report-per-organisation-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group bing ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group bing ads extended report per organisation per account per campaign per day
     - GET /data/campaign-group-bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group bing ads extended report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay? = nil, format: Format_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     - GET /data/campaign-group-doubleclick-bid-manager-report-per-organisation-per-account-per-campaign-per-creative-per-day/{organisationUuids}
     - Campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay? = nil, format: Format_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-doubleclick-bid-manager-report-per-organisation-per-account-per-campaign-per-creative-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group doubleclick bid manager report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group doubleclick bid manager report per organisation per account per campaign per day
     - GET /data/campaign-group-doubleclick-bid-manager-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group doubleclick bid manager report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-doubleclick-bid-manager-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group doubleclick campaign manager report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group doubleclick campaign manager report per organisation per account per campaign per day
     - GET /data/campaign-group-doubleclick-campaign-manager-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group doubleclick campaign manager report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-doubleclick-campaign-manager-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group facebook ad custom conversion report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group facebook ad custom conversion report per organisation per account per campaign per day
     - GET /data/campaign-group-facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group facebook ad custom conversion report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, format: Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     - GET /data/campaign-group-facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}
     - Campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, format: Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group facebook ad extended report per organisation per account per campaign per ad per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay? = nil, format: Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group facebook ad extended report per organisation per account per campaign per ad per day
     - GET /data/campaign-group-facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-per-day/{organisationUuids}
     - Campaign group facebook ad extended report per organisation per account per campaign per ad per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay? = nil, format: Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group facebook ad extended report per organisation per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group facebook ad extended report per organisation per campaign per day
     - GET /data/campaign-group-facebook-ad-extended-report-per-organisation-per-campaign-per-day/{organisationUuids}
     - Campaign group facebook ad extended report per organisation per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-facebook-ad-extended-report-per-organisation-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group facebook ad report per organisation per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group facebook ad report per organisation per campaign per day
     - GET /data/campaign-group-facebook-ad-report-per-organisation-per-campaign-per-day/{organisationUuids}
     - Campaign group facebook ad report per organisation per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-facebook-ad-report-per-organisation-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupGoalReportPerOrganisationPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupGoalReportPerOrganisationPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group goal report per organisation per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupGoalReportPerOrganisationPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupGoalReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupGoalReportPerOrganisationPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupGoalReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group goal report per organisation per day
     - GET /data/campaign-group-goal-report-per-organisation-per-day/{organisationUuids}
     - Campaign group goal report per organisation per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupGoalReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupGoalReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupGoalReportPerOrganisationPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-goal-report-per-organisation-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group google ads extended report per organisation per account per campaign per ad group per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, format: Format_getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group google ads extended report per organisation per account per campaign per ad group per day
     - GET /data/campaign-group-google-ads-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}
     - Campaign group google ads extended report per organisation per account per campaign per ad group per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, format: Format_getCampaignGroupGoogleAdsExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-google-ads-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group google ads report per organisation per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group google ads report per organisation per campaign per day
     - GET /data/campaign-group-google-ads-report-per-organisation-per-campaign-per-day/{organisationUuids}
     - Campaign group google ads report per organisation per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-google-ads-report-per-organisation-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group linkedin ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group linkedin ads extended report per organisation per account per campaign per day
     - GET /data/campaign-group-linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group linkedin ads extended report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group pinterest ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group pinterest ads extended report per organisation per account per campaign per day
     - GET /data/campaign-group-pinterest-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group pinterest ads extended report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupPinterestAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-pinterest-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupReportPerOrganisationPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupReportPerOrganisationPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group report per organisation per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupReportPerOrganisationPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupReportPerOrganisationPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group report per organisation per day
     - GET /data/campaign-group-report-per-organisation-per-day/{organisationUuids}
     - Campaign group report per organisation per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupReportPerOrganisationPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-report-per-organisation-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group snapchat ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group snapchat ads extended report per organisation per account per campaign per day
     - GET /data/campaign-group-snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group snapchat ads extended report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group tiktok ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group tiktok ads extended report per organisation per account per campaign per day
     - GET /data/campaign-group-tiktok-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group tiktok ads extended report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupTikTokAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-tiktok-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group twitter ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group twitter ads extended report per organisation per account per campaign per day
     - GET /data/campaign-group-twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Campaign group twitter ads extended report per organisation per account per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group video report per organisation per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group video report per organisation per campaign per day
     - GET /data/campaign-group-video-report-per-organisation-per-campaign-per-day/{organisationUuids}
     - Campaign group video report per organisation per campaign per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay? = nil, format: Format_getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-video-report-per-organisation-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getCampaignGroupVideoReportPerOrganisationPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getCampaignGroupVideoReportPerOrganisationPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return campaign group video report per organisation per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCampaignGroupVideoReportPerOrganisationPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupVideoReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupVideoReportPerOrganisationPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getCampaignGroupVideoReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign group video report per organisation per day
     - GET /data/campaign-group-video-report-per-organisation-per-day/{organisationUuids}
     - Campaign group video report per organisation per day
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getCampaignGroupVideoReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getCampaignGroupVideoReportPerOrganisationPerDay? = nil, format: Format_getCampaignGroupVideoReportPerOrganisationPerDay? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/data/campaign-group-video-report-per-organisation-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": (wrappedValue: fromDate?.encodeToJSON(), isExplode: true),
            "date_format": (wrappedValue: dateFormat?.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
