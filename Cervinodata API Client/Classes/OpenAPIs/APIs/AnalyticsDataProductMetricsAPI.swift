//
// AnalyticsDataProductMetricsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AnalyticsDataProductMetricsAPI {

    /**
     Return GA4 report per product name per organisation per property per week
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getGA4ReportPerProductNamePerOrganisationPerPropertyPerWeek(organisationUuids: [String], apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getGA4ReportPerProductNamePerOrganisationPerPropertyPerWeekWithRequestBuilder(organisationUuids: organisationUuids).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return GA4 report per product name per organisation per property per week
     - GET /data/ga4-report-per-product-name-per-organisation-per-property-per-week/{organisationUuids}
     - GA4 report per product name per organisation per property per week
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - returns: RequestBuilder<String> 
     */
    open class func getGA4ReportPerProductNamePerOrganisationPerPropertyPerWeekWithRequestBuilder(organisationUuids: [String]) -> RequestBuilder<String> {
        var localVariablePath = "/data/ga4-report-per-product-name-per-organisation-per-property-per-week/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Return GA4 report per product sku per organisation per property per week
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getGA4ReportPerProductSkuPerOrganisationPerPropertyPerWeek(organisationUuids: [String], apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getGA4ReportPerProductSkuPerOrganisationPerPropertyPerWeekWithRequestBuilder(organisationUuids: organisationUuids).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return GA4 report per product sku per organisation per property per week
     - GET /data/ga4-report-per-product-sku-per-organisation-per-property-per-week/{organisationUuids}
     - GA4 report per product sku per organisation per property per week
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - returns: RequestBuilder<String> 
     */
    open class func getGA4ReportPerProductSkuPerOrganisationPerPropertyPerWeekWithRequestBuilder(organisationUuids: [String]) -> RequestBuilder<String> {
        var localVariablePath = "/data/ga4-report-per-product-sku-per-organisation-per-property-per-week/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
