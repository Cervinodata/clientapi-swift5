//
// GenericDataAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class GenericDataAPI {
    /**
     Return campaign groups
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCampaignGroups(apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AnyType]?,_ error: Error?) -> Void)) {
        getCampaignGroupsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign groups
     - GET /data/campaign-groups
     - campaign groups
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<[AnyType]> 
     */
    open class func getCampaignGroupsWithRequestBuilder() -> RequestBuilder<[AnyType]> {
        let path = "/data/campaign-groups"
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[AnyType]>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter format
     */
    public enum Format_getOrganisations: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return organisations
     
     - parameter format: (query) Output format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrganisations(format: Format_getOrganisations? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getOrganisationsWithRequestBuilder(format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return organisations
     - GET /data/organisations
     - organisations
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter format: (query) Output format (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getOrganisationsWithRequestBuilder(format: Format_getOrganisations? = nil) -> RequestBuilder<String> {
        let path = "/data/organisations"
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
