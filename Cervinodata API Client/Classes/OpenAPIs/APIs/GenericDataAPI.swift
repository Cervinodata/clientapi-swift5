//
// GenericDataAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GenericDataAPI {

    /**
     Return campaign groups
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCampaignGroups(apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AnyCodable]?, _ error: Error?) -> Void)) {
        getCampaignGroupsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return campaign groups
     - GET /data/campaign-groups
     - campaign groups
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<[AnyCodable]> 
     */
    open class func getCampaignGroupsWithRequestBuilder() -> RequestBuilder<[AnyCodable]> {
        let localVariablePath = "/data/campaign-groups"
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AnyCodable]>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_getOrganisations: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return organisations
     
     - parameter format: (query) Output format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrganisations(format: Format_getOrganisations? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) {
        getOrganisationsWithRequestBuilder(format: format).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return organisations
     - GET /data/organisations
     - organisations
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter format: (query) Output format (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getOrganisationsWithRequestBuilder(format: Format_getOrganisations? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/data/organisations"
        let localVariableURLString = Cervinodata API ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
