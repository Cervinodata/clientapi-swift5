//
// AdvertisingDataAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class AdvertisingDataAPI {
    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAdAccountReportPerOrganisationPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAdAccountReportPerOrganisationPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return ad account report per organisation per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAdAccountReportPerOrganisationPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getAdAccountReportPerOrganisationPerDay? = nil, format: Format_getAdAccountReportPerOrganisationPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAdAccountReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return ad account report per organisation per day
     - GET /data/ad-account-report-per-organisation-per-day/{organisationUuids}
     - Ad account report per organisation per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAdAccountReportPerOrganisationPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getAdAccountReportPerOrganisationPerDay? = nil, format: Format_getAdAccountReportPerOrganisationPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/ad-account-report-per-organisation-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAdAccounts: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return ad accounts by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter format: (query) Output format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAdAccounts(organisationUuid: String, format: Format_getAdAccounts? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAdAccountsWithRequestBuilder(organisationUuid: organisationUuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return ad accounts by organisation
     - GET /data/ad-accounts/{organisationUuid}
     - Ad accounts by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter format: (query) Output format (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAdAccountsWithRequestBuilder(organisationUuid: String, format: Format_getAdAccounts? = nil) -> RequestBuilder<String> {
        var path = "/data/ad-accounts/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAdCampaignReportPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAdCampaignReportPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return ad campaign report per day by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAdCampaignReportPerDay(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAdCampaignReportPerDay? = nil, format: Format_getAdCampaignReportPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAdCampaignReportPerDayWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return ad campaign report per day by organisation
     - GET /data/ad-campaign-report-per-day/{organisationUuid}
     - Ad campaign report per day by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAdCampaignReportPerDayWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, dateFormat: DateFormat_getAdCampaignReportPerDay? = nil, format: Format_getAdCampaignReportPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/ad-campaign-report-per-day/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return ad campaign report per organisation per account per campaign per device per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, format: Format_getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return ad campaign report per organisation per account per campaign per device per day
     - GET /data/ad-campaign-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}
     - Ad campaign report per organisation per account per campaign per device per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, format: Format_getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/ad-campaign-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getAdCampaignReportPerOrganisationPerAccountPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAdCampaignReportPerOrganisationPerAccountPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return ad campaign report per organisation per account per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAdCampaignReportPerOrganisationPerAccountPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getAdCampaignReportPerOrganisationPerAccountPerDay? = nil, format: Format_getAdCampaignReportPerOrganisationPerAccountPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAdCampaignReportPerOrganisationPerAccountPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return ad campaign report per organisation per account per day
     - GET /data/ad-campaign-report-per-organisation-per-account-per-day/{organisationUuids}
     - Ad campaign report per organisation per account per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAdCampaignReportPerOrganisationPerAccountPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getAdCampaignReportPerOrganisationPerAccountPerDay? = nil, format: Format_getAdCampaignReportPerOrganisationPerAccountPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/ad-campaign-report-per-organisation-per-account-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter format
     */
    public enum Format_getAdCampaigns: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return ad campaigns by organisation
     
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter format: (query) Output format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAdCampaigns(organisationUuid: String, fromDate: Date? = nil, format: Format_getAdCampaigns? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAdCampaignsWithRequestBuilder(organisationUuid: organisationUuid, fromDate: fromDate, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return ad campaigns by organisation
     - GET /data/ad-campaigns/{organisationUuid}
     - Ad campaigns by organisation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuid: (path) Organisation uuid 
     - parameter fromDate: (query) From date (optional)
     - parameter format: (query) Output format (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getAdCampaignsWithRequestBuilder(organisationUuid: String, fromDate: Date? = nil, format: Format_getAdCampaigns? = nil) -> RequestBuilder<String> {
        var path = "/data/ad-campaigns/{organisationUuid}"
        let organisationUuidPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuid))"
        let organisationUuidPostEscape = organisationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuid}", with: organisationUuidPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return bing ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return bing ads extended report per organisation per account per campaign per day
     - GET /data/bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Bing ads extended report per organisation per account per campaign per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return facebook ad custom conversion report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return facebook ad custom conversion report per organisation per account per campaign per day
     - GET /data/facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Facebook ad custom conversion report per organisation per account per campaign per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return facebook ad extended report per organisation per account per campaign per ad group per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, format: Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return facebook ad extended report per organisation per account per campaign per ad group per day
     - GET /data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}
     - Facebook ad extended report per organisation per account per campaign per ad group per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil, format: Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return facebook ad extended report per organisation per account per campaign per ad per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay? = nil, format: Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return facebook ad extended report per organisation per account per campaign per ad per day
     - GET /data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-per-day/{organisationUuids}
     - Facebook ad extended report per organisation per account per campaign per ad per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay? = nil, format: Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return facebook ad extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return facebook ad extended report per organisation per account per campaign per day
     - GET /data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Facebook ad extended report per organisation per account per campaign per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return facebook ad extended report per organisation per account per campaign per device per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, format: Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return facebook ad extended report per organisation per account per campaign per device per day
     - GET /data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}
     - Facebook ad extended report per organisation per account per campaign per device per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, format: Format_getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return google ads report per organisation per account per campaign per device per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, format: Format_getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return google ads report per organisation per account per campaign per device per day
     - GET /data/google-ads-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}
     - Campaign group google ads report per organisation per account per campaign per device per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil, format: Format_getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/google-ads-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return linkedin ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return linkedin ads extended report per organisation per account per campaign per day
     - GET /data/linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Linkedin ads extended report per organisation per account per campaign per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return snapchat ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return snapchat ads extended report per organisation per account per campaign per day
     - GET /data/snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Snapchat ads extended report per organisation per account per campaign per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter dateFormat
     */
    public enum DateFormat_getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case yyyyMmDd = "YYYY-MM-DD"
        case yyyymmdd = "YYYYMMDD"
    }

    /**
     * enum for parameter format
     */
    public enum Format_getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay: String, CaseIterable {
        case csv = "csv"
        case json = "json"
    }

    /**
     Return twitter ads extended report per organisation per account per campaign per day
     
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, apiResponseQueue: DispatchQueue = Cervinodata API ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: organisationUuids, fromDate: fromDate, dateFormat: dateFormat, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Return twitter ads extended report per organisation per account per campaign per day
     - GET /data/twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}
     - Twitter ads extended report per organisation per account per campaign per day
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter organisationUuids: (path) Organisation uuids 
     - parameter fromDate: (query) From date (optional)
     - parameter dateFormat: (query) Outputted date format (optional)
     - parameter format: (query) Output format (use csv for large result sets) (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithRequestBuilder(organisationUuids: [String], fromDate: Date? = nil, dateFormat: DateFormat_getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil, format: Format_getTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay? = nil) -> RequestBuilder<String> {
        var path = "/data/twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
        let organisationUuidsPreEscape = "\(APIHelper.mapValueToPathItem(organisationUuids))"
        let organisationUuidsPostEscape = organisationUuidsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{organisationUuids}", with: organisationUuidsPostEscape, options: .literal, range: nil)
        let URLString = Cervinodata API ClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from_date": fromDate?.encodeToJSON(), 
            "date_format": dateFormat?.encodeToJSON(), 
            "format": format?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = Cervinodata API ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
